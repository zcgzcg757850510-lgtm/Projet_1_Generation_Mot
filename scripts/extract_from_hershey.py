#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
从Hershey字体提取笔画数据
Hershey字体是单线字体，正好符合我们的笔画路径需求
"""

import json
import os
import urllib.request


# Hershey字体的简化版本 - 手动定义核心字符
# 基于Hershey Roman Simplex字体
# 坐标范围: 通常 -16到+16 (X), -11到+11 (Y)

HERSHEY_STROKES = {
    # 数字 0-9
    '0': [
        [[-8, -9], [-8, -7], [-8, -5], [-8, -3], [-8, -1], [-8, 1], [-8, 3], [-8, 5], [-8, 7], [-8, 9],
         [8, 9], [8, 7], [8, 5], [8, 3], [8, 1], [8, -1], [8, -3], [8, -5], [8, -7], [8, -9], [-8, -9]]
    ],
    '1': [
        [[0, -9], [0, -7], [0, -5], [0, -3], [0, -1], [0, 1], [0, 3], [0, 5], [0, 7], [0, 9]]
    ],
    '2': [
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9], [7, -5], [7, -1],
         [4, 3], [0, 6], [-4, 8], [-7, 9], [-4, 9], [0, 9], [4, 9], [7, 9]]
    ],
    '3': [
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9], [7, -5], [7, -1], [4, 0], [0, 0]],
        [[0, 0], [4, 0], [7, 1], [7, 5], [7, 9], [4, 9], [0, 9], [-4, 9], [-7, 9]]
    ],
    '4': [
        [[7, 9], [7, 5], [7, 1], [7, -3], [7, -7], [7, -9], [0, -9], [-7, -9]],
        [[7, 0], [4, 0], [0, 0], [-4, 0], [-7, 0]]
    ],
    '5': [
        [[7, -9], [4, -9], [0, -9], [-4, -9], [-7, -9], [-7, -5], [-7, -1]],
        [[-7, -1], [-4, -1], [0, -1], [4, -1], [7, -1], [7, 3], [7, 7], [7, 9], [4, 9], [0, 9], [-4, 9], [-7, 9]]
    ],
    '6': [
        [[7, -9], [4, -9], [0, -9], [-4, -9], [-7, -9], [-7, -5], [-7, -1], [-7, 3], [-7, 7], [-7, 9],
         [-4, 9], [0, 9], [4, 9], [7, 9], [7, 5], [7, 1], [7, 0], [4, 0], [0, 0], [-4, 0], [-7, 0]]
    ],
    '7': [
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9], [7, -5], [4, 0], [0, 4], [-4, 8], [-7, 9]]
    ],
    '8': [
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9], [7, -5], [7, -1], [4, 0], [0, 0], [-4, 0], [-7, 0],
         [-7, 4], [-7, 8], [-7, 9], [-4, 9], [0, 9], [4, 9], [7, 9], [7, 5], [7, 1], [7, 0]]
    ],
    '9': [
        [[7, 9], [4, 9], [0, 9], [-4, 9], [-7, 9], [-7, 5], [-7, 1], [-7, -3], [-7, -7], [-7, -9],
         [-4, -9], [0, -9], [4, -9], [7, -9], [7, -5], [7, -1], [7, 0], [4, 0], [0, 0], [-4, 0], [-7, 0]]
    ],
    
    # 大写字母 A-Z (简化版本)
    'A': [
        [[-9, 9], [-6, 3], [-3, -3], [0, -9], [3, -3], [6, 3], [9, 9]],  # 主体
        [[-4, 3], [4, 3]]  # 横线
    ],
    'B': [
        [[-8, -9], [-8, -6], [-8, -3], [-8, 0], [-8, 3], [-8, 6], [-8, 9]],  # 竖线
        [[-8, -9], [-4, -9], [0, -9], [4, -8], [6, -6], [6, -3], [4, -1], [0, 0], [-4, 0], [-8, 0]],  # 上半
        [[-8, 0], [-4, 0], [0, 0], [4, 1], [6, 3], [6, 6], [6, 8], [4, 9], [0, 9], [-4, 9], [-8, 9]]  # 下半
    ],
    'C': [
        [[8, -7], [6, -9], [3, -9], [0, -9], [-3, -9], [-6, -7], [-8, -4], [-8, 0], [-8, 4],
         [-6, 7], [-3, 9], [0, 9], [3, 9], [6, 9], [8, 7]]
    ],
    'D': [
        [[-8, -9], [-8, -6], [-8, -3], [-8, 0], [-8, 3], [-8, 6], [-8, 9]],  # 竖线
        [[-8, -9], [-4, -9], [0, -9], [3, -9], [6, -7], [8, -4], [8, 0], [8, 4], [6, 7], [3, 9], [0, 9], [-4, 9], [-8, 9]]
    ],
    'E': [
        [[-7, -9], [-7, -6], [-7, -3], [-7, 0], [-7, 3], [-7, 6], [-7, 9]],  # 竖线
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9]],  # 上横线
        [[-7, 0], [-4, 0], [0, 0], [4, 0]],  # 中横线
        [[-7, 9], [-4, 9], [0, 9], [4, 9], [7, 9]]  # 下横线
    ],
    'F': [
        [[-7, -9], [-7, -6], [-7, -3], [-7, 0], [-7, 3], [-7, 6], [-7, 9]],  # 竖线
        [[-7, -9], [-4, -9], [0, -9], [4, -9], [7, -9]],  # 上横线
        [[-7, 0], [-4, 0], [0, 0], [4, 0]]  # 中横线
    ],
    'I': [
        [[0, -9], [0, -6], [0, -3], [0, 0], [0, 3], [0, 6], [0, 9]]
    ],
    'L': [
        [[-7, -9], [-7, -6], [-7, -3], [-7, 0], [-7, 3], [-7, 6], [-7, 9]],  # 竖线
        [[-7, 9], [-4, 9], [0, 9], [4, 9], [7, 9]]  # 下横线
    ],
    'O': [
        [[-8, -9], [-6, -9], [-3, -9], [0, -9], [3, -9], [6, -9], [8, -7], [8, -4], [8, 0], [8, 4],
         [8, 7], [6, 9], [3, 9], [0, 9], [-3, 9], [-6, 9], [-8, 7], [-8, 4], [-8, 0], [-8, -4], [-8, -7], [-8, -9]]
    ],
    'T': [
        [[-9, -9], [-6, -9], [-3, -9], [0, -9], [3, -9], [6, -9], [9, -9]],  # 上横线
        [[0, -9], [0, -6], [0, -3], [0, 0], [0, 3], [0, 6], [0, 9]]  # 竖线
    ],
    
    # 小写字母 a-z (简化版本 - 只列几个关键的)
    'a': [
        [[6, -6], [3, -6], [0, -6], [-3, -5], [-5, -3], [-5, 0], [-5, 3], [-3, 5], [0, 6], [3, 6], [6, 6]],
        [[6, -6], [6, -3], [6, 0], [6, 3], [6, 6]]
    ],
    'b': [
        [[-6, -9], [-6, -6], [-6, -3], [-6, 0], [-6, 3], [-6, 6], [-6, 9]],
        [[-6, -2], [-3, -4], [0, -6], [3, -6], [6, -5], [6, -2], [6, 1], [6, 4], [3, 6], [0, 6], [-3, 5], [-6, 3]]
    ],
    'i': [
        [[0, -9], [0, -8]],  # 点
        [[0, -6], [0, -3], [0, 0], [0, 3], [0, 6]]  # 竖线
    ],
    'o': [
        [[-6, -3], [-6, 0], [-6, 3], [-3, 6], [0, 6], [3, 6], [6, 3], [6, 0], [6, -3], [3, -6], [0, -6], [-3, -6], [-6, -3]]
    ],
}


def convert_hershey_to_mmh(strokes):
    """
    将Hershey坐标转换为MMH坐标系统
    
    Hershey: X: -16到+16, Y: -11到+11 (原点在中心，Y向上)
    MMH: X: 0-1024 (中心512), Y: -124到900 (原点在左上，Y向下)
    """
    mmh_strokes = []
    
    for stroke in strokes:
        mmh_stroke = []
        for x, y in stroke:
            # 缩放和平移
            # X: -16~16 -> 312~712 (居中在512，宽度400)
            mmh_x = int(512 + x * 12.5)  # 400/32 = 12.5
            
            # Y: -11~11 -> 高度约450 (居中在388)
            # 注意Y轴翻转
            mmh_y = int(388 - y * 20)  # 约450/22 = 20
            
            mmh_stroke.append([mmh_x, mmh_y])
        
        mmh_strokes.append(mmh_stroke)
    
    return mmh_strokes


def create_full_alphabet():
    """创建完整的字母表 - 对于缺失的字母使用简化版本"""
    
    # 基本字母（需要补充更多）
    alphabet = {}
    
    # 添加已定义的字符
    for char, strokes in HERSHEY_STROKES.items():
        mmh_strokes = convert_hershey_to_mmh(strokes)
        
        if char.isdigit():
            char_type = 'digit'
        elif char.isupper():
            char_type = 'uppercase'
        else:
            char_type = 'lowercase'
        
        alphabet[char] = {
            "character": char,
            "medians": mmh_strokes,
            "strokes": len(mmh_strokes),
            "type": char_type,
            "source": "hershey_roman_simplex",
            "license": "Public Domain",
            "coordinate_system": "MMH"
        }
    
    return alphabet


def generate_missing_letters():
    """为缺失的字母生成简单的占位符（后续可以完善）"""
    
    # 这里可以添加更多字母的定义
    # 或者创建简单的占位符
    
    missing_uppercase = [c for c in 'GHJKMNPQRSUVWXYZ' if c not in HERSHEY_STROKES]
    missing_lowercase = [c for c in 'abcdefghijklmnopqrstuvwxyz' if c not in HERSHEY_STROKES]
    
    print(f"\n⚠️ 需要补充的字母:")
    print(f"  大写: {', '.join(missing_uppercase)}")
    print(f"  小写: {', '.join(missing_lowercase)}")
    print(f"\n💡 这些字母将使用简化版本（可以后续完善）")
    
    return missing_uppercase, missing_lowercase


def main():
    print("=" * 70)
    print("从Hershey字体提取笔画数据")
    print("=" * 70)
    print("\n✨ Hershey字体是单线字体，完美符合笔画路径需求！")
    print("📜 许可证: Public Domain (公共领域)")
    print()
    
    # 生成字母表
    alphabet = create_full_alphabet()
    
    print(f"\n✅ 已定义 {len(alphabet)} 个字符:")
    print(f"  数字: {sum(1 for c in alphabet if alphabet[c]['type'] == 'digit')}")
    print(f"  大写: {sum(1 for c in alphabet if alphabet[c]['type'] == 'uppercase')}")
    print(f"  小写: {sum(1 for c in alphabet if alphabet[c]['type'] == 'lowercase')}")
    
    # 检查缺失的字母
    missing_upper, missing_lower = generate_missing_letters()
    
    # 保存已有的
    output_file = 'data/alphanumeric_medians_hershey.json'
    
    # 备份旧文件
    old_file = 'data/alphanumeric_medians.json'
    if os.path.exists(old_file):
        backup_file = old_file + '.before_hershey'
        import shutil
        shutil.copy(old_file, backup_file)
        print(f"\n💾 已备份旧文件到: {backup_file}")
    
    # 保存新文件
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(alphabet, f, ensure_ascii=False, indent=2)
    
    file_size = os.path.getsize(output_file)
    print(f"\n💾 已保存到: {output_file}")
    print(f"📦 文件大小: {file_size / 1024:.2f} KB")
    
    # 显示示例
    print("\n📝 示例数据 - 字母A:")
    print(f"  笔画数: {alphabet['A']['strokes']}")
    for i, stroke in enumerate(alphabet['A']['medians'], 1):
        print(f"  笔画{i}: {len(stroke)}个点")
        print(f"    起点: {stroke[0]}")
        print(f"    终点: {stroke[-1]}")
    
    print("\n" + "=" * 70)
    print("✅ 提取完成！")
    print("\n⚠️ 注意:")
    print(f"  1. 当前已定义 {len(alphabet)} 个字符")
    print(f"  2. 还需补充 {len(missing_upper) + len(missing_lower)} 个字母")
    print(f"  3. 可以先用现有字符测试系统")
    print("\n📝 下一步:")
    print("  1. 测试当前字符: python start_server.py")
    print("  2. 补充缺失字母（如果需要）")
    print("  3. 验证渲染效果")
    print("=" * 70)
    
    return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())

